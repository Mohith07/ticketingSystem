// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api_def.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RouteGuide_BuyTicket_FullMethodName          = "/router.RouteGuide/BuyTicket"
	RouteGuide_ShowTicket_FullMethodName         = "/router.RouteGuide/ShowTicket"
	RouteGuide_ShowSectionDetails_FullMethodName = "/router.RouteGuide/ShowSectionDetails"
	RouteGuide_RemoveUser_FullMethodName         = "/router.RouteGuide/RemoveUser"
	RouteGuide_ModifySeat_FullMethodName         = "/router.RouteGuide/ModifySeat"
	RouteGuide_ShowUsersBoarded_FullMethodName   = "/router.RouteGuide/ShowUsersBoarded"
)

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	BuyTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	ShowTicket(ctx context.Context, in *TicketId, opts ...grpc.CallOption) (*Ticket, error)
	ShowSectionDetails(ctx context.Context, in *SectionRequest, opts ...grpc.CallOption) (*SectionResponse, error)
	RemoveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*BooleanObj, error)
	ModifySeat(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Seat, error)
	ShowUsersBoarded(ctx context.Context, in *TrainId, opts ...grpc.CallOption) (*SectionResponse, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) BuyTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, RouteGuide_BuyTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) ShowTicket(ctx context.Context, in *TicketId, opts ...grpc.CallOption) (*Ticket, error) {
	out := new(Ticket)
	err := c.cc.Invoke(ctx, RouteGuide_ShowTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) ShowSectionDetails(ctx context.Context, in *SectionRequest, opts ...grpc.CallOption) (*SectionResponse, error) {
	out := new(SectionResponse)
	err := c.cc.Invoke(ctx, RouteGuide_ShowSectionDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) RemoveUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*BooleanObj, error) {
	out := new(BooleanObj)
	err := c.cc.Invoke(ctx, RouteGuide_RemoveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) ModifySeat(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Seat, error) {
	out := new(Seat)
	err := c.cc.Invoke(ctx, RouteGuide_ModifySeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) ShowUsersBoarded(ctx context.Context, in *TrainId, opts ...grpc.CallOption) (*SectionResponse, error) {
	out := new(SectionResponse)
	err := c.cc.Invoke(ctx, RouteGuide_ShowUsersBoarded_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	BuyTicket(context.Context, *TicketRequest) (*TicketResponse, error)
	ShowTicket(context.Context, *TicketId) (*Ticket, error)
	ShowSectionDetails(context.Context, *SectionRequest) (*SectionResponse, error)
	RemoveUser(context.Context, *UserRequest) (*BooleanObj, error)
	ModifySeat(context.Context, *UserRequest) (*Seat, error)
	ShowUsersBoarded(context.Context, *TrainId) (*SectionResponse, error)
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) BuyTicket(context.Context, *TicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTicket not implemented")
}
func (UnimplementedRouteGuideServer) ShowTicket(context.Context, *TicketId) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTicket not implemented")
}
func (UnimplementedRouteGuideServer) ShowSectionDetails(context.Context, *SectionRequest) (*SectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSectionDetails not implemented")
}
func (UnimplementedRouteGuideServer) RemoveUser(context.Context, *UserRequest) (*BooleanObj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedRouteGuideServer) ModifySeat(context.Context, *UserRequest) (*Seat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySeat not implemented")
}
func (UnimplementedRouteGuideServer) ShowUsersBoarded(context.Context, *TrainId) (*SectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUsersBoarded not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_BuyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).BuyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_BuyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).BuyTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_ShowTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).ShowTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_ShowTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).ShowTicket(ctx, req.(*TicketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_ShowSectionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).ShowSectionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_ShowSectionDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).ShowSectionDetails(ctx, req.(*SectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).RemoveUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_ModifySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).ModifySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_ModifySeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).ModifySeat(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_ShowUsersBoarded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).ShowUsersBoarded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGuide_ShowUsersBoarded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).ShowUsersBoarded(ctx, req.(*TrainId))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "router.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyTicket",
			Handler:    _RouteGuide_BuyTicket_Handler,
		},
		{
			MethodName: "ShowTicket",
			Handler:    _RouteGuide_ShowTicket_Handler,
		},
		{
			MethodName: "ShowSectionDetails",
			Handler:    _RouteGuide_ShowSectionDetails_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _RouteGuide_RemoveUser_Handler,
		},
		{
			MethodName: "ModifySeat",
			Handler:    _RouteGuide_ModifySeat_Handler,
		},
		{
			MethodName: "ShowUsersBoarded",
			Handler:    _RouteGuide_ShowUsersBoarded_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_def.proto",
}
